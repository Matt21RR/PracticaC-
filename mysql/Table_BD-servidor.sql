SET FOREIGN_KEY_CHECKS = 0;

DROP TABLE IF EXISTS USUARIOS;
CREATE TABLE USUARIOS(
	ID_USUARIO INT NOT NULL AUTO_INCREMENT,
    NOMBRE_USUARIO VARCHAR(45) NOT NULL,
    ID_FOTO_PERFIL tinyint NOT NULL,
    CONTRASENA VARCHAR(60) NOT NULL, 
    CORREO VARCHAR(60) NOT NULL, 
    PARTICIPACIONES INT DEFAULT 0,
    INASISTENCIAS INT DEFAULT 0,
    EVENTOS_REALIZADOS INT DEFAULT 0,
    FECHA_CAMBIO_NOMBRE DATETIME NOT NULL DEFAULT NOW(),
    CLAVE_VERIFICACION VARCHAR(12),
    FECHA_CLAVE_VERIFICACION DATETIME,
    CALIFICACION_USUARIO DOUBLE NOT NULL DEFAULT 5.0,
    CALIFICACION_EVENTOS DOUBLE NOT NULL DEFAULT 5.0,
    FECHA_REPORTE_EVENTO DATETIME,
    TIENDA_PRUEBA INT NOT NULL DEFAULT 1,
    FECHA_RECUPERAR_CUENTA DATETIME,
    INTENTOS_RESTANTES INT DEFAULT 3,
    USUARIO_ADMIN INT DEFAULT 0,
    PRIMARY KEY(ID_USUARIO));
DROP TABLE IF EXISTS REPORTES;
CREATE TABLE REPORTES(  
	ID_USUARIO INT NOT NULL, 
    TIPO_REPORTE INT NOT NULL, 
    FECHA_REPORTE DATETIME,
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS EVENTOS;
CREATE TABLE EVENTOS(   
	ID_USUARIO INT NOT NULL,
	ID_EVENTO VARCHAR(128) NOT NULL, 
    TAMANO_EVENTO INT NOT NULL,
    CANTIDAD_PARTICIPANTES INT,
    TIPO_EVENTO INT NOT NULL, 
    DESCRIPCION TEXT,
    UBICACION_LAT DOUBLE NOT NULL,
    UBICACION_LON DOUBLE NOT NULL,
    FECHA_INICIO DATETIME NOT NULL,
    FECHA_FIN DATETIME NOT NULL,
    CALIFICACION_EVENTO DOUBLE DEFAULT 5.0,
    CANTIDAD_CALIFICACIONES INT DEFAULT 0,
    EVENTO_FALSO INT DEFAULT 0,
    CHAT INT,
    NOMBRE_EVENTO_MASIVO TEXT,
    FOREIGN KEY (ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE, 
    PRIMARY KEY (ID_EVENTO));

DROP TABLE IF EXISTS REPORTANTES_EVENTO;
CREATE TABLE REPORTANTES_EVENTO(
	ID_EVENTO VARCHAR(128) NOT NULL,
    ID_REPORTANTE INT NOT NULL,
    FOREIGN KEY (ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_REPORTANTE) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS PARTICIPANTES_EVENTO;
CREATE TABLE PARTICIPANTES_EVENTO( 
	ID_EVENTO VARCHAR(128) NOT NULL,  
	ID_PARTICIPANTE INT NOT NULL, 
    MALOS_COMPORTAMIENTOS INT DEFAULT 0,
    ASISTIO INT DEFAULT 0,
    CALIFICACION_EVENTO INT,
    FOREIGN KEY(ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_PARTICIPANTE) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS EXTRA_PARTICIPANTES_EVENTO;
CREATE TABLE EXTRA_PARTICIPANTES_EVENTO(
	ID_EVENTO VARCHAR(128) NOT NULL,
    ID_PARTICIPANTE INT NOT NULL,
    NOMBRE VARCHAR(256),
    TIPO_PARTICIPANTE INT DEFAULT 1,
    PETICION_ACEPTADA INT DEFAULT 0,
    FOREIGN KEY (ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_PARTICIPANTE) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE
);
DROP TABLE IF EXISTS REPORTANTES_PARTICIPANTE;
CREATE TABLE REPORTANTES_PARTICIPANTE(
	ID_EVENTO VARCHAR(128) NOT NULL,
    ID_REPORTANTE INT NOT NULL,
    ID_REPORTADO INT NOT NULL,
    FOREIGN KEY (ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_REPORTANTE) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_REPORTADO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS PARTICIPANTES_EXPULSADOS;
CREATE TABLE PARTICIPANTES_EXPULSADOS( 
	ID_EVENTO VARCHAR(128) NOT NULL, 
	ID_EXPULSADO INT NOT NULL,
	FOREIGN KEY(ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS CHAT_EVENTO;
CREATE TABLE CHAT_EVENTO(   
	ID_EVENTO VARCHAR(128) NOT NULL, 
	MENSAJE TEXT NOT NULL, 
    FECHA_MENSAJE DATETIME, 
    ID_REMITENTE INT, 
    FOREIGN KEY(ID_EVENTO) REFERENCES EVENTOS(ID_EVENTO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS AMIGOS;
CREATE TABLE AMIGOS(
	ID_CHAT VARCHAR(45) NOT NULL,
	ID_SOLICITANTE INT NOT NULL, 
	ID_OBJETIVO INT NOT NULL, 
    AMISTAD BOOLEAN, 
    KEY_ENCRIPTACION_SOLICITANTE TEXT, 
    KEY_ENCRIPTACION_OBJETIVO TEXT,
    PRIMARY KEY (ID_CHAT),
    FOREIGN KEY (ID_SOLICITANTE) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (ID_OBJETIVO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS CHAT_AMIGOS;
CREATE TABLE CHAT_AMIGOS(	
	ID_CHAT VARCHAR(45) NOT NULL,
	MENSAJE TEXT NOT NULL, 
    FECHA_MENSAJE DATETIME, 
    ID_REMITENTE INT, 
    FOREIGN KEY (ID_CHAT) REFERENCES AMIGOS(ID_CHAT) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS TIENDAS;
CREATE TABLE TIENDAS(   
	ID_USUARIO INT NOT NULL, 
    ID_TIENDA VARCHAR(50) NOT NULL,
    NOMBRE_TIENDA TEXT NOT NULL, 
    UBICACION_LAT DOUBLE NOT NULL,
    UBICACION_LON DOUBLE NOT NULL,
    DESCRIPCION TEXT, 
    TELEFONO BIGINT, 
    CORREO VARCHAR(30),
    DIRECCION TEXT,
    FIN_PUBLICACION DATETIME, 
    FOREIGN KEY(ID_USUARIO) REFERENCES USUARIOS(ID_USUARIO) ON DELETE CASCADE ON UPDATE CASCADE, 
    PRIMARY KEY (ID_TIENDA));

DROP TABLE IF EXISTS PRODUCTOS;
CREATE TABLE PRODUCTOS(
	ID_TIENDA VARCHAR(50) NOT NULL,
    ID_PRODUCTO TEXT NOT NULL,
    NOMBRE_PRODUCTO TEXT NOT NULL, 
    PRECIO_PRODUCTO DOUBLE NOT NULL,
    FOTO_PRODUCTO TEXT,
    FOREIGN KEY (ID_TIENDA) REFERENCES TIENDAS(ID_TIENDA) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS TIPO_PRODUCTOS;
CREATE TABLE TIPO_PRODUCTOS(
	ID_TIENDA VARCHAR(50) NOT NULL,
	FOREIGN KEY (ID_TIENDA) REFERENCES TIENDAS(ID_TIENDA) ON DELETE CASCADE ON UPDATE CASCADE, 
    TIPO_PRODUCTOS VARCHAR(30));

DROP TABLE IF EXISTS CHAT_TIENDA;
CREATE TABLE CHAT_TIENDA(   
	ID_TIENDA VARCHAR(50) NOT NULL, 
    ID_REMITENTE INT NOT NULL,
	MENSAJE TEXT NOT NULL, 
    FECHA_MENSAJE DATETIME NOT NULL,
    MENSAJE_RESPUESTA TEXT,
    FOREIGN KEY(ID_TIENDA) REFERENCES TIENDAS(ID_TIENDA) ON DELETE CASCADE ON UPDATE CASCADE);

DROP TABLE IF EXISTS PAPELERA_DE_RECICLAJE;
CREATE TABLE PAPELERA_DE_RECICLAJE(
	MENSAJE TEXT,
    FECHA_MENSAJE DATETIME DEFAULT NOW());

DROP TABLE IF EXISTS MANUAL;
CREATE TABLE MANUAL(
	ID_TEXT INT NOT NULL AUTO_INCREMENT,
    TITULO VARCHAR(100) NOT NULL,
    CONTENIDO TEXT NOT NULL,
    URL_IMG TEXT,
    PRIMARY KEY(ID_TEXT));

DROP VIEW IF EXISTS VISTA_CHAT_EVENTO;
CREATE VIEW VISTA_CHAT_EVENTO AS
SELECT  T1.ID_EVENTO AS ID_EVENTO,
		T1.MENSAJE AS MENSAJE, 
        T1.FECHA_MENSAJE AS FECHA_MENSAJE, 
        T1.ID_REMITENTE AS ID_REMITENTE, 
        CASE WHEN T1.ID_REMITENTE = T3.ID_USUARIO THEN concat(T2.NOMBRE_USUARIO,' (Creador)') ELSE T2.NOMBRE_USUARIO END AS NOMBRE_REMITENTE, 
        T3.ID_USUARIO AS ID_USUARIO 
        FROM CHAT_EVENTO T1, USUARIOS T2, EVENTOS T3
        WHERE T2.ID_USUARIO = T1.ID_REMITENTE AND T1.ID_EVENTO = T3.ID_EVENTO 
        ORDER BY T1.FECHA_MENSAJE ASC ;

DROP VIEW IF EXISTS INFO_PARTICIPANTES_EVENTO;
CREATE VIEW INFO_PARTICIPANTES_EVENTO AS
SELECT  T3.ID_EVENTO AS ID_EVENTO, 
		ID_PARTICIPANTE, 
        ID_FOTO_PERFIL, 
        NOMBRE_USUARIO, 
        CASE    WHEN (T3.ID_EVENTO = T2.ID_EVENTO) AND (ID_PARTICIPANTE = T2.ID_USUARIO) 
				THEN 1 
                ELSE 0 
		END AS 'ADMINISTRADOR', 
        CALIFICACION_USUARIO,
        ASISTIO,
        FECHA_FIN
FROM USUARIOS T1, EVENTOS T2, PARTICIPANTES_EVENTO T3
WHERE T3.ID_PARTICIPANTE = T1.ID_USUARIO
	AND T3.ID_EVENTO = T2.ID_EVENTO;

DROP VIEW IF EXISTS INFO_AMIGOS;
CREATE VIEW INFO_AMIGOS AS
SELECT 	ID_CHAT,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_SOLICITANTE ELSE T1.ID_OBJETIVO END) AS ID_USUARIO,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_OBJETIVO ELSE T1.ID_SOLICITANTE END) AS ID_AMIGO, 
		(SELECT NOMBRE_USUARIO FROM USUARIOS WHERE ID_USUARIO = (case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_OBJETIVO ELSE T1.ID_SOLICITANTE END))AS NOMBRE_AMIGO,
		(SELECT ID_FOTO_PERFIL FROM USUARIOS WHERE ID_USUARIO = (case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_OBJETIVO ELSE T1.ID_SOLICITANTE END)) AS ID_FOTO_PERFIL
FROM AMIGOS T1, USUARIOS T2 
WHERE (T2.ID_USUARIO = T1.ID_SOLICITANTE
	OR T2.ID_USUARIO = T1.ID_OBJETIVO)
    AND T1.AMISTAD = 1;

DROP VIEW IF EXISTS INFO_SOLICITUDES;
CREATE VIEW INFO_SOLICITUDES AS
SELECT 
		T1.ID_SOLICITANTE AS ID_USUARIO_SOLICITANTE,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_SOLICITANTE ELSE T1.ID_OBJETIVO END) AS ID_USUARIO_AMIGO_1,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_OBJETIVO ELSE T1.ID_SOLICITANTE END) AS ID_USUARIO_AMIGO_2
FROM AMIGOS T1, USUARIOS T2 
WHERE (T2.ID_USUARIO = T1.ID_SOLICITANTE
	OR T2.ID_USUARIO = T1.ID_OBJETIVO)
    AND T1.AMISTAD = 0;

DROP VIEW IF EXISTS INFO_SOLICITUDES_RECHAZADAS;
CREATE VIEW INFO_SOLICITUDES_RECHAZADAS AS
SELECT 
		T1.ID_SOLICITANTE AS ID_USUARIO_SOLICITANTE,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_SOLICITANTE ELSE T1.ID_OBJETIVO END) AS ID_USUARIO_AMIGO_1,
		(case when T1.ID_SOLICITANTE = T2.ID_USUARIO THEN T1.ID_OBJETIVO ELSE T1.ID_SOLICITANTE END) AS ID_USUARIO_AMIGO_2
FROM AMIGOS T1, USUARIOS T2 
WHERE (T2.ID_USUARIO = T1.ID_SOLICITANTE
	OR T2.ID_USUARIO = T1.ID_OBJETIVO)
    AND T1.AMISTAD = -1;

DROP VIEW IF EXISTS LISTA_EVENTOS;
CREATE VIEW LISTA_EVENTOS AS
SELECT T1.ID_EVENTO, T1.TIPO_EVENTO, COUNT(T2.ID_PARTICIPANTE) AS CANTIDAD_INSCRITOS,T1.CANTIDAD_PARTICIPANTES,T1.FECHA_INICIO,T1.TAMANO_EVENTO,T1.ID_USUARIO AS ID_CREADOR
FROM EVENTOS T1, PARTICIPANTES_EVENTO T2
WHERE T1.ID_EVENTO = T2.ID_EVENTO
GROUP BY T1.ID_EVENTO
ORDER BY T1.FECHA_INICIO ASC;

DROP VIEW IF EXISTS LISTA_TIENDAS;
CREATE VIEW LISTA_TIENDAS AS
SELECT T1.ID_TIENDA, T1.NOMBRE_TIENDA,T1.FIN_PUBLICACION,T2.TIPO_PRODUCTOS
FROM TIENDAS T1, TIPO_PRODUCTOS T2
WHERE T1.ID_TIENDA = T2.ID_TIENDA
ORDER BY T1.FIN_PUBLICACION DESC;

DROP VIEW IF EXISTS INFO_BASICA_USUARIO;
CREATE VIEW INFO_BASICA_USUARIO AS
SELECT ID_USUARIO,NOMBRE_USUARIO,ID_FOTO_PERFIL
FROM USUARIOS;

DROP TRIGGER IF EXISTS CREADO_CUENTA;
CREATE TRIGGER CREADO_CUENTA AFTER INSERT 
    ON USUARIOS
    FOR EACH ROW
    INSERT INTO PAPELERA_DE_RECICLAJE (MENSAJE) VALUES ('Cuenta Creada');

DROP TRIGGER IF EXISTS CREADO_TIENDA;
CREATE TRIGGER CREADO_TIENDA AFTER INSERT
    ON TIENDAS
    FOR EACH ROW
    INSERT INTO PAPELERA_DE_RECICLAJE (MENSAJE) VALUES ('Tienda Creada');

DROP TRIGGER IF EXISTS BORRADO_CUENTA;
CREATE TRIGGER BORRADO_CUENTA AFTER DELETE 
    ON USUARIOS
    FOR EACH ROW
    INSERT INTO PAPELERA_DE_RECICLAJE (MENSAJE) VALUES ('Cuenta Borrada');

DROP FUNCTION IF EXISTS CANTIDAD_USUARIOS;
DELIMITER //
CREATE FUNCTION CANTIDAD_USUARIOS() RETURNS int
BEGIN
	SELECT COUNT(*) INTO @cantUsuarios FROM USUARIOS;
    RETURN @cantUsuarios;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS CANTIDAD_PEDIDOS_VALIDACION;
DELIMITER //
CREATE FUNCTION CANTIDAD_PEDIDOS_VALIDACION() RETURNS int
BEGIN
	SELECT COUNT(*) INTO @cantPedidos FROM USUARIOS WHERE CLAVE_VERIFICACION <> '';
    RETURN @cantPedidos;
END //
DELIMITER ;

DROP FUNCTION IF EXISTS HAVERSINE;
DELIMITER //
CREATE FUNCTION HAVERSINE(USUARIO_LAT DOUBLE,USUARIO_LON DOUBLE,UBICACION_LAT DOUBLE,UBICACION_LON DOUBLE) RETURNS DOUBLE
	BEGIN
		SET @USU_LAT = USUARIO_LAT;
        SET @USU_LON = USUARIO_LON;
    
		SET @UBI_LAT = RADIANS(UBICACION_LAT);
        SET @UBI_LON = RADIANS(UBICACION_LON);
        
        SET @LAT_DIF = @UBI_LAT - @USU_LAT;
        SET @LON_DIF = @UBI_LON - @USU_LON;
        
        SET @ANGULO = 2*ASIN(SQRT(POW(SIN(@LAT_DIF /2), 2) + COS(@USU_LAT) * COS(@UBI_LAT) * POW(SIN(@LON_DIF/2),2)));
        RETURN @ANGULO*6371000;
	END //
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_DIFF_FECHAS;
DELIMITER //
CREATE PROCEDURE SP_DIFF_FECHAS(a datetime)
	BEGIN
    select date_sub(a,INTERVAL 7 DAY ) into @diferencia;
    IF @diferencia > now() THEN
		SELECT "NO ADVERTIR";
	ELSE
		SELECT "ADVERTIR";
	END IF;
    END
//
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_BUSQUEDA_EVENTO;
DELIMITER //
CREATE PROCEDURE SP_BUSQUEDA_EVENTO(usuario_lat DOUBLE, usuario_lon DOUBLE, dist INT)
	BEGIN
        SELECT
			ID_EVENTO,
			UBICACION_LAT,
			UBICACION_LON,
			HAVERSINE(	usuario_lat,
						usuario_lon,
						UBICACION_LAT,
						UBICACION_LON) AS 'DISTANCIA' 
		FROM 
			EVENTOS 
		HAVING 
			DISTANCIA <= dist;
	END //
DELIMITER ;

DROP PROCEDURE IF EXISTS SP_BUSQUEDA_TIENDA;
DELIMITER //
CREATE PROCEDURE SP_BUSQUEDA_TIENDA(usuario_lat DOUBLE, usuario_lon DOUBLE, dist INT)
	BEGIN
        SELECT
			ID_TIENDA,
			UBICACION_LAT,
			UBICACION_LON,
			HAVERSINE(	usuario_lat,
						usuario_lon,
						UBICACION_LAT,
						UBICACION_LON) AS 'DISTANCIA' 
		FROM 
			TIENDAS 
		HAVING 
			DISTANCIA <= dist;
	END //
DELIMITER ;

SET FOREIGN_KEY_CHECKS = 1